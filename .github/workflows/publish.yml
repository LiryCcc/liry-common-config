name: auto publish npm

on:
  push:
    tags:
      - 'v*' # 触发条件是推送以 'v' 开头的 tag

jobs:
  build-and-publish: # 修改 Job 名称以更好地反映其目的
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10 # 保持原有版本

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22 # 保持原有版本
          cache: pnpm
          # 配置 npm registry URL
          registry-url: 'https://registry.npmjs.org/'
          # 如果你的包是带 scope 的 (e.g., @myorg/mypackage)，但想发布为 public，
          # registry-url 是必需的。对于无 scope 的 public 包，registry-url 默认就是 npmjs.org
          # 但显式指定是好习惯。
        env:
          # 将 NPM_TOKEN secret 传递给 NODE_AUTH_TOKEN 环境变量
          # actions/setup-node 会读取这个变量并配置 .npmrc 文件
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm lint

      - name: Run test
        run: pnpm test

      - name: Run build
        run: pnpm build

      - name: Publish to npm
        # 发布命令。
        # --access public 选项确保带 scope 的包也能以 public 方式发布。
        # 如果你的包没有 scope (e.g., my-package)，这个选项是多余的，但无害。
        # pnpm publish 会读取 package.json 中的版本号进行发布。
        run: pnpm pub

    # 新增 Job：部署覆盖率报告到 GitHub Pages
  deploy-coverage-pages:
    name: Deploy Coverage Report to GitHub Pages # Job 名称
    needs: build-test-publish # 这个 Job 依赖于 build-test-publish Job 的成功
    runs-on: ubuntu-latest

    permissions:
      pages: write # 允许写入 Pages 部署
      id-token: write # 允许使用 OIDC 令牌进行部署认证

    environment:
      name: github-pages # 指定 Pages 环境
      url: ${{ steps.deployment.outputs.page_url }} # 获取 Pages 部署 URL

    steps:
      - name: Download coverage report artifact # 步骤名称
        uses: actions/download-artifact@v4 # 使用 download-artifact action
        with:
          name: coverage-report # 指定要下载的 artifact 名称 (与上传时的名称一致)
          path: . # 将 artifact 下载到当前 Job 的根目录，即覆盖率报告会出现在 ./coverage/

      - name: Setup Pages # 步骤名称
        uses: actions/configure-pages@v5 # 配置 GitHub Pages 环境

      - name: Upload Pages artifact # 步骤名称
        uses: actions/upload-pages-artifact@v3 # 上传准备部署到 Pages 的 artifact
        with:
          path: coverage/ # 指定要上传到 Pages 的目录路径

      - name: Deploy to GitHub Pages # 步骤名称
        id: deployment # 为此步骤设置 ID，以便后续引用其输出
        uses: actions/deploy-pages@v4 # 使用 deploy-pages action 进行部署
